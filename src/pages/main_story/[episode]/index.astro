---
import Layout from '@/layouts/Layout.astro';
import { MAIN_STORIES } from '@/types/types';
import { getCollection } from 'astro:content';
import { mainChapterName } from '@/data/data';
import { formatToDisplayName } from '@/utils/helper';
import type { CommonCollection } from '@/types/types';

export function getStaticPaths() {
	return MAIN_STORIES.map((ep) => {
		return { params: { episode: ep } };
	});
}

const { episode } = Astro.params;

const episodeStories = await getCollection(episode);
const displayChapterName = formatToDisplayName(mainChapterName[episode]);
---

<Layout title={`${displayChapterName}`}>
	<main class="flex min-h-dvh w-full flex-col items-center justify-center">
		<div>
			<div class="flex flex-col gap-x-6 gap-y-3 py-16 text-sm">
				{
					episodeStories.length > 0 &&
						Array.from(
							episodeStories.reduce((groups, story) => {
								const baseId = story.id.slice(0, -1);

								if (!groups.has(baseId)) {
									groups.set(baseId, []);
								}
								groups.get(baseId).push(story);
								return groups;
							}, new Map())
						).map(([baseId, stories]: [string, CommonCollection[]]) => {
							const currChapter = baseId.slice(4, 5);
							const currEpisode = baseId.slice(-2);
							const formattedEpisode =
								currEpisode[0] === '0' && currEpisode[1] !== '0' ? currEpisode[1] : currEpisode;
							const displayEpisodeName = `${currChapter}-${formattedEpisode}`;

							stories.sort((a) => (a.id.slice(-1) === 'a' ? 1 : -1));

							return (
								<>
									<div class="flex flex-col gap-2">
										<p>{displayEpisodeName}</p>
										<div class="flex flex-col gap-1">
											{stories.map((story: CommonCollection) => {
												const suffix = story.id.slice(-1) === 'a' ? 'Post-Battle' : 'Pre-Battle';
												return (
													<a href={`/main_story/${episode}/${story.id.slice(-3)}`}>{suffix}</a>
												);
											})}
										</div>
									</div>
								</>
							);
						})
				}
			</div>
		</div>
	</main>
</Layout>
